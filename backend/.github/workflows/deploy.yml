name: "BeanBa - CI/CD: PR + Deploy (main)"

on:
  push:
    branches:
      - main
      - develop

  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    name: 🧪 Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout repository
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 🔧 Grant Gradle permission
        run: chmod +x ./gradlew
        working-directory: ./beanBa

      - name: 🔄 Build without running tests
        run: ./gradlew clean build -x test
        working-directory: ./beanBa

      - name: ❌ Leave comment on PR if build fails
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const branchName = context.payload.pull_request.head.ref;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `🚨 **CI 실패** (브랜치: \`${branchName}\`) - 빌드 또는 테스트에 실패했습니다. 로그를 확인하고 수정해주세요!`

            });

      - name: ✅ Leave comment on PR if build succeeds
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const branchName = context.payload.pull_request.head.ref;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `✅ **CI 성공** (브랜치: \`${branchName}\`) - 빌드 및 테스트를 통과했습니다! 🎉`
            });

  deploy:
    name: 🚀 Deploy to EC2
    needs: build
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main')

    steps:
      - name: ✅ Checkout repository
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 🔧 Grant Gradle permission
        run: chmod +x ./gradlew
        working-directory: ./beanBa

      - name: ✉️ Build JAR file
        run: ./gradlew bootJar
        working-directory: ./beanBa

      - name: 🔄 Rename jar file to app.jar
        run: mv beanBa/build/libs/backendProject-0.0.1-SNAPSHOT.jar beanBa/build/libs/app.jar

      - name: 📦 Move app.jar to docker folder
        run: cp beanBa/build/libs/app.jar docker/app.jar

      - name: 📄 Write .env file safely
        run: |
          {
            echo "SPRING_PROFILES_ACTIVE=dev"
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}"
            echo "GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}"
            echo "GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}"
            echo "KAKAO_OAUTH_CLIENT_ID=${{ secrets.KAKAO_OAUTH_CLIENT_ID }}"
            echo "KAKAO_OAUTH_CLIENT_SECRET=${{ secrets.KAKAO_OAUTH_CLIENT_SECRET }}"
            echo "SPRING_MAIL_HOST=${{ secrets.SPRING_MAIL_HOST }}"
            echo "SPRING_MAIL_PORT=${{ secrets.SPRING_MAIL_PORT }}"
            echo "SPRING_MAIL_USERNAME=${{ secrets.SPRING_MAIL_USERNAME }}"
            echo "SPRING_MAIL_PASSWORD=${{ secrets.SPRING_MAIL_PASSWORD }}"
            echo "SPRING_ELASTICSEARCH_URIS=${{ secrets.SPRING_ELASTICSEARCH_URIS }}"
            echo "SPRING_DATASOURCE_URL_PROD=${{ secrets.SPRING_DATASOURCE_URL_PROD }}"
            echo "SPRING_DATASOURCE_USERNAME_PROD=${{ secrets.SPRING_DATASOURCE_USERNAME_PROD }}"
            echo "SPRING_DATASOURCE_PASSWORD_PROD=${{ secrets.SPRING_DATASOURCE_PASSWORD_PROD }}"
            echo "REDIS_HOST_PROD=${{ secrets.REDIS_HOST_PROD }}"
            echo "REDIS_PORT_PROD=${{ secrets.REDIS_PORT_PROD }}"
            echo "SPRING_DATASOURCE_URL_DEV=${{ secrets.SPRING_DATASOURCE_URL_DEV }}"
            echo "SPRING_DATASOURCE_USERNAME_DEV=${{ secrets.SPRING_DATASOURCE_USERNAME_DEV }}"
            echo "SPRING_DATASOURCE_PASSWORD_DEV=${{ secrets.SPRING_DATASOURCE_PASSWORD_DEV }}"
            echo "REDIS_HOST_DEV=${{ secrets.REDIS_HOST_DEV }}"
            echo "REDIS_PORT_DEV=${{ secrets.REDIS_PORT_DEV }}"
            echo "S3_REION_STATIC=${{ secrets.S3_REION_STATIC }}"
            echo "S3_ACCESSKEY=${{ secrets.S3_ACCESSKEY }}"
            echo "S3_SECRETKEY=${{ secrets.S3_SECRETKEY }}"
            echo "S3_BUCKET=${{ secrets.S3_BUCKET }}"
          } > beanBa/.env

      - name: 🔐 Save SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: 🛡️ Add EC2 host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

#      - name: 📂 Send elastic-docker & server-docker (1-time setup)
#        run: |
#          scp -r -i key.pem \
#            docker/elastic-docker \
#            docker/server-docker \
#            ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/BeanBa/docker/

      - name: 📤 Upload app.jar and .env to EC2
        run: |
          scp -i key.pem \
            docker/app.jar \
            beanBa/.env \
            ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/BeanBa/docker/

      - name: ⚡ SSH into EC2 and run Blue/Green deploy
        run: |
          ssh -i key.pem ubuntu@${{ secrets.EC2_HOST }} <<EOF
            cd /home/ubuntu/BeanBa/docker
            chmod +x deploy.sh
            ./deploy.sh
            echo "👍 SSH connection complete"
            exit 0
          EOF

permissions:
  pull-requests: write